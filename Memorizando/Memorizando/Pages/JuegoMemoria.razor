@page "/JuegoMemoria"
@using System.Timers
@implements IDisposable

<h3>JuegoMemoria</h3>

@foreach (var letra in palabraRandom)
{
    if (mostrarPalabra)
    {
        <div class="letra border text-uppercase">
            <span>@letra</span>
        </div>
    }
}
<hr />

<div>
    <div class="letra border text-uppercase"><span>a</span></div>
    <div class="letra border text-uppercase"><span>b</span></div>
    <div class="letra border text-uppercase"><span>c</span></div>
    <div class="letra border text-uppercase"><span>d</span></div>
    <div class="letra border text-uppercase"><span>e</span></div>
    <div class="letra border text-uppercase"><span>f</span></div>
    <div class="letra border text-uppercase"><span>g</span></div>
    <div class="letra border text-uppercase"><span>h</span></div>
    <div class="letra border text-uppercase"><span>i</span></div>
    <div class="letra border text-uppercase"><span>j</span></div>
</div>

@foreach (var letra in palabraUsuario)
{
    <div class="letra border text-uppercase disabled">
        <span>@letra</span>
    </div>
}

<hr />
<!-- #region Dibujar teclado -->
@foreach (var letra in letras)
{
    <input type="button" name="btn-@letra" value="@letra" @onclick="@(() =>SeleccionarLetra(letra))" class="text-uppercase btn btn-secondary botonLetra m-1" />
}
<input type="button" name="Submit" value="Go" class="btn btn-success" @onclick="@(() => ComprobarResultado())" />

<!-- #endregion -->

@code {
    Timer timer;
    const int nivelInicial = 3;
    string palabraRandom = string.Empty;
    int nivel = nivelInicial;
    string letraSeleccionada = string.Empty;
    string palabraUsuario = string.Empty;
    bool mostrarPalabra = true;
    int tiempos = 0;

    List<char> letras = new List<char>();
    private void CargarTeclado()
    {
        for (int i = 0; i < 26; i++)
        {
            char letra = (char)('a' + i);
            letras.Add(letra);
        }
    }

    private void SeleccionarLetra(char letra)
    {
        if (palabraUsuario.Count() < nivel)
        {
            palabraUsuario += letra.ToString();
        }
    }

    private void ComprobarResultado()
    {
        if (palabraRandom == palabraUsuario)
            nivel++;
        else
            nivel = nivelInicial;

        timer.Start();
        mostrarPalabra = true;
        palabraUsuario = string.Empty;
        palabraRandom = string.Empty;
        tiempos = 0;
    }

    protected override void OnInitialized()
    {
        CargarTeclado();
        timer = new Timer();
        timer.Interval = 500; // cada segundo
        timer.Elapsed += TimerOnElapsed; // ejecutar este método
        timer.Start();
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        tiempos++;

        if (palabraRandom.Count() < nivel)
            palabraRandom += RandomLetter.GetLetter();

        if (tiempos > nivel)
        {
            timer.Stop();
            mostrarPalabra = false;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }

    static class RandomLetter
    {
        static Random _random = new Random();
        public static char GetLetter()
        {
            // This method returns a random lowercase letter.
            // ... Between 'a' and 'z' inclusize.
            int num = _random.Next(0, 26); // Zero to 25
            char let = (char)('a' + num);
            return let;
        }
    }
}